// Copyright 2025 Brett Morgan. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'package:freezed_annotation/freezed_annotation.dart';

import 'log_entry.dart';

part 'log_state.freezed.dart';
part 'log_state.g.dart';

/// Represents the application's trace log of LLM interaction entries.
/// Contains a list of [LogEntry] objects.
@freezed
abstract class LogState with _$LogState {
  const LogState._();

  /// Creates a [LogState] object with a list of log entries.
  const factory LogState({required List<LogEntry> logEntries}) = _LogState;

  /// Creates an initial [LogState] with an empty list of log entries.
  factory LogState.initial() => const LogState(logEntries: []);

  /// Adds a new log entry representing user-entered text with
  /// the [text] entered by the user.
  LogState logUserText(String text) =>
      copyWith(logEntries: [...logEntries, LogEntry.userText(text)]);

  /// Adds a new log entry representing text generated by the LLM with the
  /// the [text] generated by the LLM.
  LogState logLlmText(String text) =>
      copyWith(logEntries: [...logEntries, LogEntry.llmText(text)]);

  /// Adds a new log entry representing a function call with the [functionName]
  /// and [args].
  LogState logFunctionCall(String functionName, Map<String, Object?> args) =>
      copyWith(
        logEntries: [...logEntries, LogEntry.functionCall(functionName, args)],
      );

  /// Adds a new log entry capturing the [results] of a function call.
  LogState logFunctionResults(Map<String, Object?> results) =>
      copyWith(logEntries: [...logEntries, LogEntry.functionResults(results)]);

  /// Adds a new log entry representing an error that occurred. Takes the
  /// error [e] and the optional StackTrace [st].
  LogState logError(Object e, {StackTrace? st}) =>
      copyWith(logEntries: [...logEntries, LogEntry.error(e, st: st)]);

  /// Adds a new log entry representing a [warning] message.
  LogState logWarning(String warning) =>
      copyWith(logEntries: [...logEntries, LogEntry.warning(warning)]);

  /// Adds a new log entry representing an [info] message.
  LogState logInfo(String info) =>
      copyWith(logEntries: [...logEntries, LogEntry.info(info)]);

  /// Creates a [LogState] object from a [json] map.
  factory LogState.fromJson(Map<String, Object?> json) =>
      _$LogStateFromJson(json);
}
