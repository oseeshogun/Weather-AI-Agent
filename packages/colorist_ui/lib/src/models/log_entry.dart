// Copyright 2025 Brett Morgan. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:convert';

import 'package:characters/characters.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:uuid/uuid.dart';

part 'log_entry.freezed.dart';
part 'log_entry.g.dart';

/// Represents the type of a log entry.
enum LogEntryType { text, error, warning, info }

/// Represents the role or source of a log entry.
enum LogEntryRole { user, llm, app, tool }

const _uuid = Uuid();

/// Represents a single entry in the application's log.  Each entry contains
/// information about the event that occurred, who or what caused it, and a
/// timestamp.
@freezed
abstract class LogEntry with _$LogEntry {
  const LogEntry._();

  /// Creates a new [LogEntry] object.
  ///
  /// * [id]: A unique identifier for this log entry.
  /// * [content]: The textual content of the log entry.  This might be user input, LLM output,
  ///   function call details, or other relevant information.
  /// * [author]: The role or source of the log entry (user, LLM, application, or tool).
  /// * [type]: The type of log entry (text, error, warning, or info).
  /// * [timestamp]: The time the log entry was created.
  factory LogEntry({
    required String id,
    required String content,
    required LogEntryRole author,
    required LogEntryType type,
    required DateTime timestamp,
  }) = _LogEntry;

  /// Creates a [LogEntry] representing user-entered text.  Truncates text
  /// longer than 50 characters. Takes [content] text entered by the user.
  factory LogEntry.userText(String content) => LogEntry(
        id: _uuid.v4(),
        content: content.characters.length > 50
            ? '${content.characters.take(50).join()}...'
            : content,
        author: LogEntryRole.user,
        type: LogEntryType.text,
        timestamp: DateTime.now(),
      );

  /// Creates a [LogEntry] representing text generated by the LLM (Large
  /// Language Model). Truncates text longer than 50 characters. Takes [content]
  /// text generated by the LLM.
  factory LogEntry.llmText(String content) => LogEntry(
        id: _uuid.v4(),
        content: content.characters.length > 50
            ? '${content.characters.take(50).join()}...'
            : content,
        author: LogEntryRole.llm,
        type: LogEntryType.text,
        timestamp: DateTime.now(),
      );

  /// Creates a [LogEntry] representing a function call named [functionName]
  /// with [args] as map of arguments passed to the function.
  factory LogEntry.functionCall(
    String functionName,
    Map<String, Object?> args,
  ) =>
      LogEntry(
        id: _uuid.v4(),
        content: '$functionName(${json.encode(args)})',
        author: LogEntryRole.llm,
        type: LogEntryType.info,
        timestamp: DateTime.now(),
      );

  /// Creates a [LogEntry] representing the results of a function call. Takes
  /// [results] as map of the results returned by the function.
  factory LogEntry.functionResults(Map<String, Object?> results) => LogEntry(
        id: _uuid.v4(),
        content: 'Result: ${json.encode(results)}',
        author: LogEntryRole.tool,
        type: LogEntryType.info,
        timestamp: DateTime.now(),
      );

  /// Creates a [LogEntry] representing an error that occurred. Takes the
  /// [error] object and, optionally, the stack trace as [st].
  factory LogEntry.error(Object error, {StackTrace? st}) => LogEntry(
        id: _uuid.v4(),
        content: '$error${st != null ? '\n$st' : ''}',
        author: LogEntryRole.app,
        type: LogEntryType.error,
        timestamp: DateTime.now(),
      );

  /// Creates a [LogEntry] representing a warning message with the [content].
  factory LogEntry.warning(String content) => LogEntry(
        id: _uuid.v4(),
        content: content,
        author: LogEntryRole.app,
        type: LogEntryType.warning,
        timestamp: DateTime.now(),
      );

  /// Creates a [LogEntry] representing an informational message. Takes
  /// [content], the informational message.
  factory LogEntry.info(String content) => LogEntry(
        id: _uuid.v4(),
        content: content,
        author: LogEntryRole.app,
        type: LogEntryType.info,
        timestamp: DateTime.now(),
      );

  /// Creates a [LogEntry] object from a [json] map.
  factory LogEntry.fromJson(Map<String, Object?> json) =>
      _$LogEntryFromJson(json);
}
