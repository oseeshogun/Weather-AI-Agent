// Copyright 2025 Brett Morgan. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'package:riverpod_annotation/riverpod_annotation.dart';

import '../models/log_state.dart';

part 'log_state_notifier.g.dart';

/// A Riverpod provider that manages the application's log state.  This notifier
/// provides methods to add various types of log entries, such as user input,
/// LLM output, function calls, results, errors, warnings, and informational
/// messages.  It uses the `LogState` model to maintain the log entries.
@riverpod
class LogStateNotifier extends _$LogStateNotifier {
  /// Initializes the log state with an empty list of log entries.
  @override
  LogState build() => LogState.initial();

  /// Adds a new log entry representing user-entered text to the log
  /// with the [content] entered by the user.
  void logUserText(String content) {
    state = state.logUserText(content);
  }

  /// Adds a new log entry representing text generated by the LLM to the log
  /// with the [content] generated by the LLM.
  void logLlmText(String content) {
    state = state.logLlmText(content);
  }

  /// Adds a new log entry representing a function call to the log with
  /// the [functionName] and [args].
  void logFunctionCall(String functionName, Map<String, Object?> args) {
    state = state.logFunctionCall(functionName, args);
  }

  /// Adds a new log entry representing the results of a function call to the
  /// log with the [results] of the function call.
  void logFunctionResults(Map<String, Object?> results) {
    state = state.logFunctionResults(results);
  }

  /// Adds a new log entry representing an error that occurred to the log with
  /// the error [e] and an optional StackTrace [st].
  void logError(Object e, {StackTrace? st}) {
    state = state.logError(e, st: st);
  }

  /// Adds a new log entry representing a warning message to the log with
  /// the [warning].
  void logWarning(String warning) {
    state = state.logWarning(warning);
  }

  /// Adds a new log entry representing an informational message to the log
  /// with the [info].
  void logInfo(String info) {
    state = state.logInfo(info);
  }

  /// Reset state.
  void reset() {
    state = LogState.initial();
  }
}
